<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
	<style>
		body{height:100vh;display: flex;justify-content: center;align-items: center;}
		.box{position: relative;width:100%;height: 90vh;border:1px solid green;}
		.child{position: absolute;width:100px;height:100px;border:1px solid #000;}
		.child1{top: 10%;left: 10%;}
		.child2{top: 15%;left: 20%;}
		.child3{top: 20%;left: 30%;}
		.child4{top: 25%;left: 40%;}
		.child5{top: 45%;left: 15%;}
		.child6{top: 65%;left: 25%;}
		.child7{top: 14%;left: 31%;}

		.vertical-line, .horizontal-line{position: absolute;background: #000;top: 100px;left: 100px;pointer-events: none;z-index: 9999;}
		.vertical-line{width:2px;}
		.horizontal-line{height: 2px;}

		.horizontal-vertical-line-value-box{position: absolute;top:0;left: 0;}
	</style>
</head>
<body>
	<div class="box">
		<div class="child child1" data-id="child1"></div>
		<div class="child child2" data-id="child2"></div>
		<div class="child child3" data-id="child3"></div>
		<div class="child child4" data-id="child4"></div>
		<div class="child child5" data-id="child5"></div>
		<div class="child child6" data-id="child6"></div>
		<div class="child child7" data-id="child7"></div>
	</div>

	<div class="vertical-line"></div>
	<div class="horizontal-line"></div>
	<div class="horizontal-vertical-line-value-box">
		<span class="horizontal-line-value"></span>
		<span class="vertical-line-value"></span>
	</div>

	<script>
		const boxEl = document.querySelector('.box');
		const boxElRect = boxEl.getBoundingClientRect();
		const childs = document.querySelectorAll('.child');
		const verticalLine = document.querySelector('.vertical-line');
		const horizontalLine = document.querySelector('.horizontal-line');
		const horizontalLineValue = document.querySelector('.horizontal-line-value');
		const verticalLineValue = document.querySelector('.vertical-line-value');

		
		let y = 0;		
		let pointerTopElement = null;
		let pointerBottomElement = null;

		let x = 0;		
		let pointerLeftElement = null;
		let pointerRightElement = null;

		boxEl.addEventListener('pointermove', (e)=>{

			const isAnyElementOnCurrentPoint = document.elementFromPoint(e.clientX, e.clientY);
			console.log(isAnyElementOnCurrentPoint);

			// Y - top
			y = e.clientY;
			for(y; boxElRect.top < y; y--){
				pointerTopElement = document.elementFromPoint(e.clientX, y);
				pointerTopElement = pointerTopElement.matches('.child') ? pointerTopElement : null;

				if(isAnyElementOnCurrentPoint === pointerTopElement) pointerTopElement = null;

				if(pointerTopElement) break;
			}

			// Y - bottom
			y = e.clientY;
			for(y; boxElRect.bottom > y; y++){
				pointerBottomElement = document.elementFromPoint(e.clientX, y);
				pointerBottomElement = pointerBottomElement.matches('.child') ? pointerBottomElement : null;

				if(isAnyElementOnCurrentPoint === pointerBottomElement) pointerBottomElement = null;

				if(pointerBottomElement) break;
			}

			// Vertical Line
			let verticalLineStart = pointerTopElement?.getBoundingClientRect().bottom || boxElRect.top;
			let verticalLineEnd = pointerBottomElement?.getBoundingClientRect().top || boxElRect.bottom;
			let verticalLineHeight = verticalLineEnd - verticalLineStart;
			console.log(verticalLineHeight);
			verticalLine.style.left = e.clientX + 'px';
			verticalLine.style.top = verticalLineStart + 'px';
			verticalLine.style.height = verticalLineHeight + 'px';


			// X - left
			x = e.clientX;
			for(x; boxElRect.left < x; x--){
				pointerLeftElement = document.elementFromPoint(x, e.clientY);
				pointerLeftElement = pointerLeftElement.matches('.child') ? pointerLeftElement : null;

				if(isAnyElementOnCurrentPoint === pointerLeftElement) pointerLeftElement = null;

				if(pointerLeftElement) break;
			}

			// Y - bottom
			x = e.clientX;
			for(x; boxElRect.right > x; x++){				
				pointerRightElement = document.elementFromPoint(x, e.clientY);
				pointerRightElement = pointerRightElement.matches('.child') ? pointerRightElement : null;

				if(isAnyElementOnCurrentPoint === pointerRightElement) pointerRightElement = null;

				if(pointerRightElement) break;
			}

			// Horizontal Line
			let horizontalLineStart = pointerLeftElement?.getBoundingClientRect().right || boxElRect.left;
			let horizontalLineEnd = pointerRightElement?.getBoundingClientRect().left || boxElRect.right;
			let horizontalLineWidth = horizontalLineEnd - horizontalLineStart;

			horizontalLine.style.left = horizontalLineStart + 'px';
			horizontalLine.style.top = e.clientY + 'px';
			horizontalLine.style.width = horizontalLineWidth + 'px';	

			horizontalLineValue.innerHTML = 'X'+parseInt(horizontalLineWidth)+'px';
			verticalLineValue.innerHTML = 'Y'+parseInt(verticalLineHeight)+'px';
		})

	</script>
</body>
</html>